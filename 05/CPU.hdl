// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=Noti);
    Mux16(a=ALUo, b=instruction, sel=Noti, out=INSTorALU); // 1st mux16

    Or(a=Noti, b=instruction[5], out=RAc); // helper or
    ARegister(in=INSTorALU, load=RAc, out=RAo, out[0..14]=addressM); // A register

    And(a=instruction[15], b=instruction[12], out=M2sel);
    Mux16(a=RAo, b=inM, sel=M2sel, out=AorM); // 2nd mux16

    And(a=instruction[4], b=instruction[15], out=RDc);
    DRegister(in=ALUo, load=RDc, out=RDo); // D register


    ALU(x=RDo, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUo, zr=zro, ng=ngo); // ALU

    And(a=instruction[15], b=instruction[3], out=writeM); // does nothing just connects d to writeM

    Not(in=ngo,out=pos);
	Not(in=zro,out=nzr);
	And(a=instruction[15],b=instruction[0],out=jgt);
	And(a=pos,b=nzr,out=posnzr);
	And(a=jgt,b=posnzr,out=ld1);

	And(a=instruction[15],b=instruction[1],out=jeq);
	And(a=jeq,b=zro,out=ld2);

	And(a=instruction[15],b=instruction[2],out=jlt);
	And(a=jlt,b=ngo,out=ld3);

	Or(a=ld1,b=ld2,out=ldt);
	Or(a=ld3,b=ldt,out=ld);

    PC(in=RAo, reset=reset, load=ld, inc=true, out[0..14]=pc); // PC
}
